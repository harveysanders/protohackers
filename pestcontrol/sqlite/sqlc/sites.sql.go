// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sites.sql

package sqlc

import (
	"context"
)

const createSite = `-- name: CreateSite :one
INSERT INTO
  sites (id, created_at)
VALUES
  (?, ?) RETURNING id, created_at
`

type CreateSiteParams struct {
	ID        uint32
	CreatedAt string
}

func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) (Site, error) {
	row := q.db.QueryRowContext(ctx, createSite, arg.ID, arg.CreatedAt)
	var i Site
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createSpecies = `-- name: CreateSpecies :one
INSERT INTO
  species (name, created_at)
VALUES
  (?, ?) RETURNING id, created_at, name
`

type CreateSpeciesParams struct {
	Name      string
	CreatedAt string
}

func (q *Queries) CreateSpecies(ctx context.Context, arg CreateSpeciesParams) (Species, error) {
	row := q.db.QueryRowContext(ctx, createSpecies, arg.Name, arg.CreatedAt)
	var i Species
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Name)
	return i, err
}

const createTargetPopulation = `-- name: CreateTargetPopulation :one
INSERT INTO
  target_populations (site_id, species_id, min, max, created_at)
VALUES
  (?, ?, ?, ?, ?) RETURNING id, created_at, site_id, species_id, min, max
`

type CreateTargetPopulationParams struct {
	SiteID    uint32
	SpeciesID uint32
	Min       uint32
	Max       uint32
	CreatedAt string
}

func (q *Queries) CreateTargetPopulation(ctx context.Context, arg CreateTargetPopulationParams) (TargetPopulation, error) {
	row := q.db.QueryRowContext(ctx, createTargetPopulation,
		arg.SiteID,
		arg.SpeciesID,
		arg.Min,
		arg.Max,
		arg.CreatedAt,
	)
	var i TargetPopulation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.SiteID,
		&i.SpeciesID,
		&i.Min,
		&i.Max,
	)
	return i, err
}

const getSite = `-- name: GetSite :one
SELECT
  id, created_at
FROM
  sites
WHERE
  id = ?
LIMIT
  1
`

func (q *Queries) GetSite(ctx context.Context, id uint32) (Site, error) {
	row := q.db.QueryRowContext(ctx, getSite, id)
	var i Site
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getSpeciesByName = `-- name: GetSpeciesByName :one
SELECT
  id, created_at, name
FROM
  species
WHERE
  name = ?
`

func (q *Queries) GetSpeciesByName(ctx context.Context, name string) (Species, error) {
	row := q.db.QueryRowContext(ctx, getSpeciesByName, name)
	var i Species
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Name)
	return i, err
}
